#!/data/data/com.termux/files/usr/bin/bash
### DEBDROID v3.00.
### Made By WMCB Tech @wmcbtech30
### This script should not be modified at some cases
### Dependencies Required
### proot, tar, wget, dialog, pulseaudio
###
### Rootfs Hosting - https://github.com/debuerreotype/docker-debian-artifacts
set -e -u
ROOTFS="$PREFIX/share/debdroid/rootfs"
CONFIG="$PREFIX/share/debdroid/config"
PATHBASE="/usr/local/bin:/usr/local/sbin:/usr/local/games:/bin:/sbin:/usr/bin:/usr/sbin:/usr/games"
STATEFUL="$PREFIX/share/debdroid"
STATUS="$PREFIX/share/debdroid/rootfs/usr/lib/.libdone.so.9"

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BOLD="$(tput bold)"
NOATTR="$(tput sgr0)"

## Root Detection
## Running This script as root will fail and mess up permissions
## And Prevent this script to run inside fakeroot also
if [[ $EUID -eq 0 ]]; then
  echo "${RED}${BOLD}This script should not be run as ROOT. please use linux deploy instead${NOATTR}" 1>&2
  exit 1
fi

check-network-connectivity(){
	if ping -q -c 1 -W 1 8.8.8.8 >/dev/null 2>&1; then
  		exec
	else
  		echo "${RED}${BOLD}Cannot connect to network. Try Checking your network connection. Aborting exit code 2${NOATTR}"
		exit 2
	fi
}

set-suite(){
	case `echo $SUITE` in
		stable|buster)
			flavor="buster" ;;
		unstable|sid)
			flavor="sid" ;;
		oldstable|stretch)
			flavor="stretch" ;;
		bullseye|testing)
			flavor="bullseye" ;;
		*)
			flavor="buster" ;;
	esac
}

check-dlcache() {
	if [ -e $HOME/.cache/dlcache-$flavor.tar.*z ]; then
		echo "${GREEN}${BOLD}Distribution Chosen: ${YELLOW}${flavor}${NOATTR}"
		echo ""
		echo "${GREEN}${BOLD}Existing Image File Found. Skipping Download and Extracting the rootfs${NOATTR}"
		echo "${GREEN}${BOLD}Unpacking The Base System.... This may take a few minutes${NOATTR}"
		proot --link2symlink -0 tar -xf $HOME/.cache/dlcache-$flavor.tar.*z --exclude dev -C $ROOTFS > /dev/null 2>&1
	else
		echo "${GREEN}${BOLD}Downloading the Debian Image file: ${YELLOW}${flavor}${NOATTR}"
		echo ""
		mkdir -p $HOME/.cache >/dev/null 2>&1 &&
		wget "https://github.com/debuerreotype/docker-debian-artifacts/raw/${archurl}/${flavor}/rootfs.tar.xz" -O $HOME/.cache/dlcache-$flavor.tar.xz &&
		echo ""
		echo "${GREEN}${BOLD}Unpacking The Base System.... This may take a few minutes${NOATTR}"
		proot --link2symlink -0 tar -xf $HOME/.cache/dlcache-$flavor.tar.*z --exclude dev -C $ROOTFS > /dev/null 2>&1
	fi
}

show_help(){
	echo "${BOLD}${GREEN}DebDroid: An Easy to Use Debian Installer for non-rooted devices"
	echo ""
	echo "Usage: debdroid [command]"
	echo ""
	echo " --install	Installs an Debian Distribution"
	echo " --uninstall	Uninstalls a Debian Distribution"
	echo " --reinstall	Reinstalls a Debian Distribution"
	echo " --launch	Launches Debian Distribution as Regular User"
	echo " --launch-su	Launches Debian Distribution as Root"
	echo " --isolated	Launches Debian Distribution without host storage access"
	echo " --import	Imports the Debian Container Image"
	echo " --export	Exports the Debian Container Image"
	echo ""
	echo "To Pass Command within DebDroid. use the '--' option or '---' if isolated"
	echo "e.g.:"
	echo "	debdroid -- sudo apt update"
	echo "	debdroid -- nano"
	echo "	debdroid --- sudo apt upgrade"
	echo ""
	echo "File Sharing Options:"
	echo " --send		Sends file/folder to user's home directory 'alias to --push'"
	echo " --recieve	Gets file/folder from the container 'alias to --pull'"
	echo " --share	Shares Directory through /mnt/shared directory"
	echo " --unshare	Unshares the Shared Directory"
	echo ""
	echo "Sharing Examples: "
	echo "	debdroid --send /sdcard/code.py"
	echo "	debdroid --share ~/directory"
	echo "	debdroid --recieve /opt/code.py"
	echo ""
	echo "Supported Distributions: "
	echo "unstable/sid, stable/buster oldstable/stretch testing/bullseye"
	echo "You can Install them by typing: "
	echo ""
	echo "	debdroid --install <suite>"
	echo ""
	echo "If No Suite is specified. then it will install the stable one"
	echo "NOTE: Sid/Testing Versions may tend to fail the installation${NOATTR}"
	echo ""
	exit 2
}

exitcode(){
	echo ""
	echo "${RED}Exiting as Requested... Probably Installation Interruption"
	echo "To fix this. please run ${YELLOW}'debdroid --uninstall'${RED} and rerun the install command again${NOATTR}"
	echo ""
	exit 2
}

install-debian() {
	SUITE="$@"
	trap 'exitcode' HUP INT QUIT TERM KILL
	if [ -e $STATUS ]; then
    		echo "${RED}${BOLD}An Existing Installation Found. Please Uninstall a Distro First${NOATTR}"
			exit 2
	else
    		echo "${GREEN}${BOLD}Preparing to Install a Debian Container.${NOATTR}"
	fi
	### Check Network
	check-network-connectivity
	### Check for an Architecture
	case `uname -m` in
		aarch64|arm64)
			archurl="dist-arm64v8" ;;
		arm|armv7l|armv8l)
			archurl="dist-arm32v7" ;;
		amd64|x86_64)
			archurl="dist-amd64" ;;
		x86|i*86)
			archurl="dist-i386" ;;
		*)
			echo "${RED}${BOLD}unknown architecture${NOATTR}"; exit 1 ;;
	esac
	set-suite
	check-dlcache
	echo "${GREEN}${BOLD}Configuring the Base System.. This may take Several Minutes${NOATTR}"
	echo ""
	set-android-groups || true
	install $CONFIG/stat $ROOTFS/proc/stat &&
	install $CONFIG/version $ROOTFS/proc/version &&
	install $CONFIG/vmstat $ROOTFS/proc/vmstat &&
	install $CONFIG/uptime $ROOTFS/proc/uptime &&
	install $CONFIG/loadavg $ROOTFS/proc/loadavg &&
	install $CONFIG/resolv.conf $ROOTFS/etc/resolv.conf &&
	install $CONFIG/hosts $ROOTFS/etc/hosts &&
	install $CONFIG/libdone.so.9 $ROOTFS/usr/lib/.libdone.so.9 &&
	install -m 755 $CONFIG/distro-config.sh $ROOTFS/opt/distro-config.sh &&
	echo "$flavor" > $ROOTFS/.proot.distinfo &&
	bash $CONFIG/configure.sh &&
	echo "${GREEN}${BOLD}Cleaning Up.....${NOATTR}"
	echo ""
	rm -rf $ROOTFS/opt/distro-config.sh &&
	echo "${GREEN}${BOLD}Debian Container Successfully Installed. To Start type: debdroid --launch${NOATTR}"
	echo ""
	exit 1
}

reinstall() {
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot Reinstall Debian Container. Container isn't installed${NOATTR}"
		exit 2
	fi
	SUITE="$(cat $ROOTFS/.proot.distinfo)"
	uninstall || true
	trap 'exitcode' HUP INT QUIT TERM KILL
	if [ -e $STATUS ]; then
    		echo "${RED}${BOLD}An Existing Installation Found. Please Uninstall a Distro First${NOATTR}"
			exit 2
	else
    		echo "${GREEN}${BOLD}Preparing to Install a Debian Container.${NOATTR}"
	fi
	### Check Network
	check-network-connectivity
	### Check for an Architecture
	case `dpkg --print-architecture` in
		aarch64)
			archurl="dist-arm64v8" ;;
		arm)
			archurl="dist-arm32v7" ;;
		amd64)
			archurl="dist-amd64" ;;
		x86_64)
			archurl="dist-amd64" ;;
		i*86)
			archurl="dist-i386" ;;
		x86)
			archurl="dist-i386" ;;
		*)
			echo "unknown architecture"; exit 1 ;;
	esac
	set-suite
	check-dlcache
	echo "${GREEN}${BOLD}Configuring the Base System.. This may take Several Minutes${NOATTR}"
	echo ""
	set-android-groups || true
	install $CONFIG/stat $ROOTFS/proc/stat &&
	install $CONFIG/version $ROOTFS/proc/version &&
	install $CONFIG/vmstat $ROOTFS/proc/vmstat &&
	install $CONFIG/uptime $ROOTFS/proc/uptime &&
	install $CONFIG/loadavg $ROOTFS/proc/loadavg &&
	install $CONFIG/resolv.conf $ROOTFS/etc/resolv.conf &&
	install $CONFIG/hosts $ROOTFS/etc/hosts &&
	install $CONFIG/libdone.so.9 $ROOTFS/usr/lib/.libdone.so.9 &&
	install -m 755 $CONFIG/distro-config.sh $ROOTFS/opt/distro-config.sh &&
	echo "$flavor" > $ROOTFS/.proot.distinfo &&
	bash $CONFIG/configure.sh &&
	echo "${GREEN}${BOLD}Cleaning Up.....${NOATTR}"
	echo ""
	rm -rf $ROOTFS/opt/distro-config.sh &&
	echo "${GREEN}${BOLD}Debian Container Successfully Installed. To Start type: debdroid --launch${NOATTR}"
	echo ""
	exit 1
}

uninstall() {
	echo "${RED}${BOLD}WARNING: you are about to uninstall a linux distribution in 10 seconds${NOATTR}"
	echo "${RED}${BOLD}to stop hit Ctrl-C before Uninstallation${NOATTR}"
	sleep 10 &&
	echo "${YELLOW}Uninstalling an Linux Distro...${NOATTR}"
	chmod 777 -R $ROOTFS > /dev/null 2>&1 || true
	rm -rf $STATEFUL/rootfs > /dev/null 2>&1 &&
	mkdir $STATEFUL/rootfs > /dev/null 2>&1 &&
	echo "${GREEN}${BOLD}Debian Container Successfully Uninstalled${NOATTR}"
}

set-android-groups(){
	### This should atleast fix group errors for Ubuntu Guests
	echo "aid_$(id -un):x:$(id -u):$(id -g):Android Groups:/:/usr/sbin/nologin" >> "$ROOTFS/etc/passwd"
	echo "aid_$(id -un):*:18446:0:99999:7:::" >> "$ROOTFS/etc/shadow"
	local g
		for g in $(id -G); do
			echo "aid_$(id -gn "$g"):x:${g}:root,aid_$(id -un)" >> "$ROOTFS/etc/group"
			if [ -f "$ROOTFS/etc/gshadow" ]; then
				echo "aid_$(id -gn "$g"):*::root,aid_$(id -un)" >> "$ROOTFS/etc/gshadow"
			fi
		done
}

send() {
	SEND_ARGS="$@"
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot stat Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	### Check for an Argument
	if [ ! -z "$SEND_ARGS" ]; then
		:
	else
		echo "${RED}${BOLD}Please Specify a File/Folder to Send${NOATTR}"
		exit 2
	fi
	### Check for a file to Send
	if [ ! -e "$SEND_ARGS" ]; then
		echo "${RED}${BOLD}Cannot Send file to the Container: No Such file or Directory${NOATTR}"
		exit 2
	fi
	### Send files
	echo ""
	echo "${YELLOW}${BOLD}Sending File: $SEND_ARGS ${NOATTR}"
	cp -r $SEND_ARGS $ROOTFS/home/$(cat $ROOTFS/etc/userinfo.rc)/ >/dev/null 2>&1 || true
	echo "${GREEN}${BOLD}The File $SEND_ARGS successfully sent at your Home Directory${NOATTR}"
}

share() {
	SHARE_ARGS="$@"
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot stat Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	### Ask for Directory
	if [ ! -z "$SHARE_ARGS" ]; then
		:
	else
		echo "${RED}${BOLD}Please Specify a Directory to Share${NOATTR}"
		exit 2
	fi
	### Check if a directory is specified else abort
	if [ ! -d "$SHARE_ARGS" ]; then
		echo "${RED}${BOLD}Cannot Apply Share Properties. either you're trying to share a non-directory or directory isn't exists${NOATTR}"
		exit 2
	fi
	### Share Directory
	echo "${YELLOW}${BOLD}Applying Share Properties${NOATTR}"
	echo "-b $(realpath $SHARE_ARGS):/mnt/shared" > $ROOTFS/.proot.shareinfo
	echo "${GREEN}${BOLD}The Directory $SHARE_ARGS is now shared and located at /mnt/shared. you can unshare it by typing:"
	echo "debdroid --unshare${NOATTR}"
}

recieve(){
	RECIEVE_ARGS="$@"
	local PWD="$(pwd)"
	if [ -e $STATUS ]; then
		:
	else
		echo "${RED}${BOLD}Cannot stat Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	### Check for an Argument
	if [ ! -z "$RECIEVE_ARGS" ]; then
		:
	else
		echo "${RED}${BOLD}Please Specify an File/Folder to pull${NOATTR}"
		exit 2
	fi
	### Check for an File to pull
	if [ ! -e "${ROOTFS}${RECIEVE_ARGS}" ]; then
		echo "${RED}${BOLD}Cannot Pull a file from the container: no such file or directory${NOATTR}"
		exit 2
	fi
	### Pull Files
	echo "${YELLOW}${BOLD}Pulling $RECIEVE_ARGS...${NOATTR}" 
	cp -rf ${ROOTFS}${RECIEVE_ARGS} $PWD >/dev/null 2>&1 || true
}

unshare(){
	if [ -e $STATUS ]; then
		:
	else
		echo "${RED}${BOLD}Cannot stat Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	### Simply delete the metadata
	rm -rf $ROOTFS/.proot.shareinfo >/dev/null 2>&1 || true
}

launch() {
	local SHARE_PROPERTIES=""
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot start Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	### Check for Extra Shares
	if [ -e $ROOTFS/.proot.shareinfo ]; then
		export SHARE_PROPERTIES="$(cat $ROOTFS/.proot.shareinfo)"
	fi
	unset LD_PRELOAD
	start-pulseaudio
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H -k 4.14.206 \
	$SHARE_PROPERTIES \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /dev/urandom:/dev/random \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b $ROOTFS/proc/uptime:/proc/uptime \
	-b $ROOTFS/proc/vmstat:/proc/vmstat \
	-b $ROOTFS/proc/loadavg:/proc/loadavg \
	-b /storage/emulated/0:/sdcard \
	-b /:/host-rootfs \
	-w /root \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	/bin/su -l $(cat $ROOTFS/etc/userinfo.rc) || true
	:
	exec stop-pulseaudio || true
}

launch-su() {
	local SHARE_PROPERTIES=""
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot start Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	### Check for Extra Shares
	if [ -e $ROOTFS/.proot.shareinfo ]; then
		export SHARE_PROPERTIES="$(cat $ROOTFS/.proot.shareinfo)"
	fi
	unset LD_PRELOAD
	start-pulseaudio
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H -k 4.14.206 \
	$SHARE_PROPERTIES \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /dev/urandom:/dev/random \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b $ROOTFS/proc/uptime:/proc/uptime \
	-b $ROOTFS/proc/vmstat:/proc/vmstat \
	-b $ROOTFS/proc/loadavg:/proc/loadavg \
	-b /storage/emulated/0:/sdcard \
	-b /:/host-rootfs \
	-w /root \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	/bin/su -l || true
	:
	exec stop-pulseaudio || true
}

launch-isol() {
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot start Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	unset LD_PRELOAD
	start-pulseaudio
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H -k 4.14.206 \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $ROOTFS/tmp:/dev/shm \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b $ROOTFS/proc/uptime:/proc/uptime \
	-b $ROOTFS/proc/vmstat:/proc/vmstat \
	-b $ROOTFS/proc/loadavg:/proc/loadavg \
	-w /root \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	/bin/su -l $(cat $ROOTFS/etc/userinfo.rc) || true
	:
	exec stop-pulseaudio || true
}

parse-cmd() {
	local SHARE_PROPERTIES=""
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot start Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	### Check for Extra Shares
	if [ -e $ROOTFS/.proot.shareinfo ]; then
		export SHARE_PROPERTIES="$(cat $ROOTFS/.proot.shareinfo)"
	fi
	unset LD_PRELOAD
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H -k 4.14.206 \
	$SHARE_PROPERTIES \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /dev/urandom:/dev/random \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b $ROOTFS/proc/uptime:/proc/uptime \
	-b $ROOTFS/proc/vmstat:/proc/vmstat \
	-b $ROOTFS/proc/loadavg:/proc/loadavg \
	-b /storage/emulated/0:/sdcard \
	-b /:/host-rootfs \
	-w /home/$(cat $ROOTFS/etc/userinfo.rc) \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	sudo -u $(cat $ROOTFS/etc/userinfo.rc) "$@"
}

parse-cmd-isol() {
	if [ -e $STATUS ]; then
    	:
	else
		echo "${RED}${BOLD}Cannot start Debian Container. Please install it using ${YELLOW}debdroid --install${NOATTR}"
		exit 2
	fi
	unset LD_PRELOAD
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H -k 4.14.206 \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $ROOTFS/tmp:/dev/shm \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b $ROOTFS/proc/uptime:/proc/uptime \
	-b $ROOTFS/proc/vmstat:/proc/vmstat \
	-b $ROOTFS/proc/loadavg:/proc/loadavg \
	-w /home/$(cat $ROOTFS/etc/userinfo.rc) \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	sudo -u $(cat $ROOTFS/etc/userinfo.rc) "$@"
}

if [ $# = 0 ]; then
	show_help
fi

CMD="$1"
shift 1

case "$CMD" in
	--install) install-debian "$@" ;;
	--uninstall)
		uninstall
		;;
	--reinstall)
		reinstall
		;;
	--launch)
		launch
		;;
	--launch-su)
		launch-su
		;;
	--isolated)
		launch-isol
		;;
	--export)
		exec $STATEFUL/lib/libbackup-rootfs.so
		;;
	--import)
		exec $STATEFUL/lib/librestore-rootfs.so
		;;
	-h|--help|--show-help)
		show_help
		;;
	--send|--push)
		send "$@"
		;;
	--recieve|--pull)
		recieve "$@"
		;;
	--share)
		share "$@"
		;;
	--unshare)
		unshare
		;;
	--)
		parse-cmd "$@"
		;;
	---)
		parse-cmd-isol "$@"
		;;
	*) echo "${RED}Unknown Command: '$CMD' ${NOATTR}"; exit 2;;
esac
